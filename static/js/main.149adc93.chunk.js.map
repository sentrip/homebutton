{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["DoorSocket","onOpen","onClose","onMessage","data","this","_socket","_host","_port","_connected","_onOpen","_onClose","_onMessage","newHost","_validHost","_createSocket","newPort","send","readyState","WebSocket","OPEN","onopen","e","onclose","onerror","onmessage","close","_onConnect","_onDisconnect","wasConnected","setTimeout","connected","h","undefined","length","DoorClient","local","global","_setState","s","func","settings","host","localHost","port","localPort","globalHost","globalPort","username","password","msg","btoa","reader","FileReader","addEventListener","text","target","result","paired","open","readAsText","Close","Open","Pair","Circle","className","props","style","padding","display","borderRadius","Component","Modal","setAppElement","globalClient","App","useState","modalIsOpen","setIsOpen","localStorage","getItem","pin","state","setState","parseInt","piUsername","piPassword","piDirectory","setSettings","clear","key","setItem","Object","keys","adminClass","setup","lockOrientation","orientation","id","onClick","placeholder","value","onChange","type","minHeight","isOpen","onAfterOpen","onRequestClose","content","backgroundColor","contentLabel","width","fontSize","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.149adc93.chunk.js","sourcesContent":["import './App.css';\nimport {useState, Component} from \"react\";\nimport Modal from 'react-modal';\nimport DeviceOrientation, {Orientation} from 'react-screen-orientation'\nimport ScrollLock from \"react-scrolllock\";\n\nclass DoorSocket {\n    constructor(onOpen = () => {}, onClose = () => {}, onMessage = data => {}) {\n        this._socket = null\n        this._host = \"\"\n        this._port = 8080\n        this._connected = false\n        this._onOpen = onOpen\n        this._onClose = onClose\n        this._onMessage = onMessage\n    }\n\n    get connected() {\n        return this._connected\n    }\n\n    get host() {\n        return this._host\n    }\n\n    set host(newHost) {\n        if (this._validHost(newHost) && this._host !== newHost) {\n            this._host = newHost\n            this._createSocket()\n        }\n    }\n\n    get port() {\n        return this._port\n    }\n\n    set port(newPort) {\n        if (this._port !== newPort) {\n            this._port = newPort\n            this._createSocket()\n        }\n    }\n\n    send(data) {\n        this._socket.send(data)\n    }\n\n    _createSocket() {\n        if (this._socket !== null && this._socket.readyState === WebSocket.OPEN) {\n            this._socket.onopen = e => {}\n            this._socket.onclose = e => {}\n            this._socket.onerror = e => {}\n            this._socket.onmessage = e => {}\n            this._socket.close()\n            this._socket = null\n        }\n        if (!this._validHost(this._host)) {\n            return\n        }\n        this._socket = new WebSocket(`ws://${this._host}:${this._port}`)\n        this._socket.onopen = e => this._onConnect()\n        this._socket.onclose = e => this._onDisconnect()\n        this._socket.onerror = e => this._onDisconnect()\n        this._socket.onmessage = e => this._onMessage(e.data)\n    }\n\n    _onConnect() {\n        if (!this._connected) {\n            this._onOpen()\n        }\n        this._connected = true\n    }\n\n    _onDisconnect() {\n        const wasConnected = this._connected\n        this._connected = false\n        if (wasConnected) {\n            this._onClose()\n        }\n        setTimeout(() => {\n            if (this._socket !== null && !this.connected) {\n                this._createSocket()\n            }\n        }, 1000)\n    }\n\n    _validHost(h) {\n        return h !== null && h !== undefined && h.length !== 0\n    }\n}\n\nclass DoorClient {\n    static Close = '0'\n    static Open = '1'\n    static Pair = '2'\n\n    constructor() {\n        this.local = new DoorSocket(() => this._onConnect(), () => this._onDisconnect(), data => this._onMessage(data))\n        this.global = new DoorSocket(() => this._onConnect(), () => this._onDisconnect(), data => this._onMessage(data))\n        this._setState = s => {}\n    }\n\n    setState(func = s => {}) {\n        this._setState = func\n    }\n\n    setup(settings) {\n        this.local.host = settings.localHost\n        this.local.port = settings.localPort\n        this.global.host = settings.globalHost\n        this.global.port = settings.globalPort\n    }\n\n    send(username, password, msg) {\n        if (!this.local.connected && !this.global.connected) return\n        let socket = this.local.connected ? this.local : this.global\n        socket.send(btoa(`${username},${password},${msg}`))\n    }\n\n    _onMessage(data) {\n        const reader = new FileReader()\n        reader.addEventListener('loadend', (e) => {\n            const text = e.target.result\n            if (text === '1') {\n                this._setState({paired: true, open: true})\n            } else if (text === '0') {\n                this._setState({paired: true, open: false})\n            } else {\n                this._setState({paired: false, open: false})\n            }\n        })\n        reader.readAsText(data)\n    }\n\n    _onConnect() {\n        if (!this.local.connected && !this.global.connected) {\n            this._setState({connected: true})\n        }\n    }\n\n    _onDisconnect() {\n        if (!this.local.connected && !this.global.connected) {\n            this._setState({connected: false})\n        }\n    }\n\n}\n\nclass Circle extends Component {\n    render() {\n        let circleStyle = {\n            padding:10,\n            display:\"inline-block\",\n            borderRadius: \"50%\",\n        };\n        return (\n            <div className={this.props.className} style={circleStyle}>\n            </div>\n        );\n    }\n}\n\nfunction App() {\n    const [modalIsOpen, setIsOpen] = useState(false)\n\n    const [state, setState] = useState({\n        open: false,\n        paired: (localStorage.getItem(\"paired\") || \"false\") === \"true\",\n        connected: false,\n        username: localStorage.getItem(\"username\") || \"\",\n        pin: localStorage.getItem(\"pin\") || \"\"\n    });\n\n    const [settings, setSettings] = useState({\n        globalHost: localStorage.getItem(\"globalHost\") || \"\",\n        globalPort: parseInt(localStorage.getItem(\"globalPort\") || \"8000\"),\n        localHost: localStorage.getItem(\"localHost\") || \"192.168.0.104\",//\"192.168.0.89\",\n        localPort: parseInt(localStorage.getItem(\"localPort\") || \"8080\"),\n        piUsername: localStorage.getItem(\"piUsername\") || \"\",\n        piPassword: localStorage.getItem(\"piPassword\") || \"\",\n        piDirectory: localStorage.getItem(\"piDirectory\") || \"\"\n    });\n\n    globalClient.setState(s => {\n        setState({...state, ...s})\n    })\n    localStorage.clear()\n    for (let key of [\"paired\", \"username\", \"pin\"]) {\n        localStorage.setItem(key, state[key])\n    }\n    for (let key of Object.keys(settings)) {\n        localStorage.setItem(key, settings[key])\n    }\n\n    const handleSubmit = e => {\n        const msg = !state.paired ? DoorClient.Pair : (state.open ? DoorClient.Close : DoorClient.Open)\n        globalClient.send(state.username, state.pin, msg)\n    }\n\n    const handleUsernameChange = e => {\n        setState({...state, paired: false, username: e.target.value})\n    }\n\n    const handlePinChange = e => {\n        setState({...state, paired: false, pin: e.target.value})\n    }\n\n    const handleGlobalHostChange = e => {\n        setSettings({...settings, globalHost: e.target.value})\n    }\n\n    const handleGlobalPortChange = e => {\n        setSettings({...settings, globalPort: parseInt(e.target.value)})\n    }\n\n    const handleLocalHostChange = e => {\n        setSettings({...settings, localHost: e.target.value})\n    }\n\n    const handleLocalPortChange = e => {\n        setSettings({...settings, localPort: parseInt(e.target.value)})\n    }\n\n    // TODO: Server management\n    const handlePiUsernameChange = e => {\n        setSettings({...settings, piUsername: e.target.value})\n    }\n\n    const handlePiPasswordChange = e => {\n        setSettings({...settings, piPassword: e.target.value})\n    }\n\n    const handlePiDirectoryChange = e => {\n        setSettings({...settings, piDirectory: e.target.value})\n    }\n\n    const handleRunStop = e => {\n\n    }\n\n    const handlePair = e => {\n\n    }\n\n    function openModal() {\n        setIsOpen(true);\n    }\n\n    function afterOpenModal() {\n\n    }\n\n    function closeModal() {\n        setIsOpen(false);\n    }\n\n    let adminClass = state.username === \"admin\" ? \"\" : \"HideAdmin\"\n\n    globalClient.setup(settings)\n\n    return (\n        <DeviceOrientation lockOrientation={'portrait'}>\n        <Orientation orientation='portrait'>\n        <div className=\"App\" id=\"root\">\n            <ScrollLock/>\n            <header className=\"App-header\">\n                <span>\n                    <Circle className={\"StatusIcon Door-\" + (state.connected ? \"open\" : \"close\")} />\n                    <h2 style={{display: \"inline-block\"}}>homebutton</h2>\n                    <button className=\"Settings-button\" onClick={openModal}/>\n                </span>\n                <input className=\"Door-input\" id=\"user\" placeholder=\"username\" value={state.username} onChange={handleUsernameChange}/>\n                <input className=\"Door-input\" id=\"pin\" placeholder=\"pin\" type=\"number\" value={state.pin} onChange={handlePinChange}/>\n                <button id=\"submit\" className={\"Door-button Door-\" + (!state.paired ? \"pair\" : (state.open ? \"close\" : \"open\"))}\n                    style={{minHeight: \"70vh\"}}\n                    onClick={handleSubmit}>\n                    {!state.paired ? \"Pair\" : (state.open ? \"Close\" : \"Open\")}</button>\n            </header>\n            <Modal\n                isOpen={modalIsOpen}\n                onAfterOpen={afterOpenModal}\n                onRequestClose={closeModal}\n                style={{content: {\n                    backgroundColor: \"#282c34\"\n                }}}\n                contentLabel=\"Settings\"\n              >\n                <span className=\"Door-input\">\n                    <input style={{width: \"75%\", fontSize: \"0.9em\"}} id=\"globalHost\" placeholder=\"global host\" value={settings.globalHost} onChange={handleGlobalHostChange}/>\n                    <input style={{width: \"25%\", fontSize: \"0.9em\"}} id=\"globalPort\" placeholder=\"port\" type=\"number\" value={settings.globalPort} onChange={handleGlobalPortChange}/>\n                </span>\n                <span className=\"Door-input\">\n                    <input style={{width: \"75%\", fontSize: \"0.9em\"}} id=\"localHost\" placeholder=\"local host\"  value={settings.localHost} onChange={handleLocalHostChange}/>\n                    <input style={{width: \"25%\", fontSize: \"0.9em\"}} id=\"localPort\" placeholder=\"port\" type=\"number\" value={settings.localPort} onChange={handleLocalPortChange}/>\n                </span>\n\n                <input className={\"Door-input \" + adminClass} id=\"piUsername\" placeholder=\"pi username\" value={settings.piUsername} onChange={handlePiUsernameChange}/>\n                <input className={\"Door-input \" + adminClass} id=\"piPassword\" placeholder=\"pi password\" type=\"password\" value={settings.piPassword} onChange={handlePiPasswordChange}/>\n                <input className={\"Door-input \" + adminClass} id=\"piDirectory\" placeholder=\"pi directory\" value={settings.piDirectory} onChange={handlePiDirectoryChange}/>\n\n                <button id=\"run\" className={\"Door-button Door-\" + (state.connected ? \"close\" : \"open\") + \" \" + adminClass}  style={{height: \"30%\"}}\n                    onClick={handleRunStop}>\n                    {state.connected ? \"Stop\" : \"Run\"}</button>\n\n                <button id=\"pair\" className={\"Door-button Door-pair \" + adminClass} style={{height: \"30%\"}}\n                    onClick={handlePair}>\n                    Pair</button>\n            </Modal>\n        </div>\n        </Orientation>\n        </DeviceOrientation>\n    );\n}\n\nModal.setAppElement('#root')\nlet globalClient = new DoorClient()\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}